{"ast":null,"code":"//importar las libreria de formulario que vamos a necesitar\nimport { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nfunction LoginComponent_div_5_p_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 8);\n    i0.ɵɵtext(1, \" El email es requerido. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_5_p_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 8);\n    i0.ɵɵtext(1, \" El formato del email debe ser valido. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, LoginComponent_div_5_p_1_Template, 2, 0, \"p\", 7);\n    i0.ɵɵtemplate(2, LoginComponent_div_5_p_2_Template, 2, 0, \"p\", 7);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.Mail == null ? null : ctx_r0.Mail.hasError(\"required\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.Mail == null ? null : ctx_r0.Mail.hasError(\"email\"));\n  }\n}\nfunction LoginComponent_div_11_p_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 8);\n    i0.ɵɵtext(1, \" El password es requerido. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_11_p_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 8);\n    i0.ɵɵtext(1, \" El password debe ser de 8 o m\\u00E1s caracteres. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, LoginComponent_div_11_p_1_Template, 2, 0, \"p\", 7);\n    i0.ɵɵtemplate(2, LoginComponent_div_11_p_2_Template, 2, 0, \"p\", 7);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.Mail == null ? null : ctx_r1.Mail.hasError(\"required\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.Password == null ? null : ctx_r1.Password.errors == null ? null : ctx_r1.Password.errors.minlength);\n  }\n}\nexport class LoginComponent {\n  //Inyectar en el constructor el formBuilder\n  constructor(formBuilder) {\n    this.formBuilder = formBuilder;\n    //Creamos el grupo de controles para la formulacion de login \n    this.form = this.formBuilder.group({\n      password: ['', [Validators.required, Validators.minLength(8)]],\n      email: ['', [Validators.required, Validators.email]]\n    });\n  }\n  ngOnInit() {}\n  //Metodos para el formulario: toma el dato del password \n  get Password() {\n    return this.form.get(\"password\");\n  }\n  //toma datos del mail\n  get Mail() {\n    return this.form.get(\"email\");\n  }\n  //metodo de validacion del password \n  get PasswordValid() {\n    return this.Password?.touched && !this.Password?.valid;\n  }\n  //metodo de validacion de mail \n  get MailValid() {\n    return this.Mail?.touched && !this.Mail?.valid;\n  }\n  onEnviar(event) {\n    //detenemos la propagacion o ejecucion del componente submit de un form\n    event.preventDefault;\n    if (this.form.valid) {\n      //llamamos a nuestro servicio para enviar los datos al servidor\n      //tambien podemos ejecutar alguna lógica extra\n      alert(\"Todo salió bien ¡Enviar formulario!\");\n    } else {\n      //Corremos todas las validaciones para que se ejecuten los mensajes de error en el template\n      this.form.markAllAsTouched();\n      alert(\"Contraseña o correo incorrectos\");\n    }\n  }\n}\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 24,\n  vars: 5,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [\"for\", \"email\"], [\"type\", \"email\", \"formControlName\", \"email\"], [4, \"ngIf\"], [\"for\", \"exampleInputPassword1\", 1, \"form-label\"], [\"type\", \"password\", \"formControlName\", \"password\", \"[class.border-danger\", \"MailInvalid\", \"]\", \"\"], [\"type\", \"submit\"], [\"class\", \"error\", 4, \"ngIf\"], [1, \"error\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_0_listener($event) {\n        return ctx.onEnviar($event);\n      });\n      i0.ɵɵelementStart(1, \"div\")(2, \"label\", 1);\n      i0.ɵɵtext(3, \"Email: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"input\", 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(5, LoginComponent_div_5_Template, 3, 2, \"div\", 3);\n      i0.ɵɵelement(6, \"br\");\n      i0.ɵɵelementStart(7, \"div\")(8, \"label\", 4);\n      i0.ɵɵtext(9, \"Password: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(10, \"input\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(11, LoginComponent_div_11_Template, 3, 2, \"div\", 3);\n      i0.ɵɵelement(12, \"br\");\n      i0.ɵɵelementStart(13, \"div\")(14, \"button\", 6);\n      i0.ɵɵtext(15, \"Iniciar Sesi\\u00F3n\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(16, \"div\")(17, \"p\");\n      i0.ɵɵtext(18, \"Un debuger para mostrar que es posible hacer un biding directo al formulario \");\n      i0.ɵɵelementStart(19, \"strong\");\n      i0.ɵɵtext(20);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(21, \"strong\");\n      i0.ɵɵtext(22);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(23, \"br\");\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.form);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", (ctx.Mail == null ? null : ctx.Mail.errors) && (ctx.Mail == null ? null : ctx.Mail.touched));\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngIf\", (ctx.Password == null ? null : ctx.Password.errors) && (ctx.Password == null ? null : ctx.Password.touched));\n      i0.ɵɵadvance(9);\n      i0.ɵɵtextInterpolate(ctx.form.value.email);\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate(ctx.form.value.password);\n    }\n  },\n  styles: [\".error[_ngcontent-%COMP%]{\\r\\n    color: red;\\r\\n}\\r\\n\\r\\n.border-danger[_ngcontent-%COMP%]{\\r\\n    border-color: red ;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbG9naW4vbG9naW4uY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLFVBQVU7QUFDZDs7QUFFQTtJQUNJLGtCQUFrQjtBQUN0QiIsInNvdXJjZXNDb250ZW50IjpbIi5lcnJvcntcclxuICAgIGNvbG9yOiByZWQ7XHJcbn1cclxuXHJcbi5ib3JkZXItZGFuZ2Vye1xyXG4gICAgYm9yZGVyLWNvbG9yOiByZWQgO1xyXG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AACA;AACA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;;ICK3DC,4BAAoD;IAChDA,wCACJ;IAAAA,iBAAI;;;;;IACJA,4BAAiD;IAC7CA,uDACJ;IAAAA,iBAAI;;;;;IANRA,2BAA2C;IACvCA,iEAEI;IACJA,iEAEI;IACRA,iBAAM;;;;IANEA,eAAgC;IAAhCA,oFAAgC;IAGhCA,eAA6B;IAA7BA,iFAA6B;;;;;IAYjCA,4BAAoD;IAChDA,2CACJ;IAAAA,iBAAI;;;;;IACJA,4BAAqD;IACjDA,kEACJ;IAAAA,iBAAI;;;;;IANRA,2BAAmD;IAC/CA,kEAEI;IACJA,kEAEI;IACRA,iBAAM;;;;IANEA,eAAgC;IAAhCA,oFAAgC;IAGhCA,eAAiC;IAAjCA,gIAAiC;;;ADf7C,OAAM,MAAOC,cAAc;EAGzB;EACAC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;IAC7B;IACA,IAAI,CAACC,IAAI,GAAE,IAAI,CAACD,WAAW,CAACE,KAAK,CAAC;MAChCC,QAAQ,EAAC,CAAC,EAAE,EAAE,CAACP,UAAU,CAACQ,QAAQ,EAAER,UAAU,CAACS,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;MAC7DC,KAAK,EAAC,CAAC,EAAE,EAAE,CAACV,UAAU,CAACQ,QAAQ,EAAER,UAAU,CAACU,KAAK,CAAC;KACnD,CAAC;EACJ;EAEAC,QAAQ,IAAI;EACd;EACE,IAAIC,QAAQ;IACV,OAAO,IAAI,CAACP,IAAI,CAACQ,GAAG,CAAC,UAAU,CAAC;EAClC;EACF;EACE,IAAIC,IAAI;IACN,OAAO,IAAI,CAACT,IAAI,CAACQ,GAAG,CAAC,OAAO,CAAC;EAC/B;EACF;EACE,IAAIE,aAAa;IACf,OAAO,IAAI,CAACH,QAAQ,EAAEI,OAAO,IAAI,CAAC,IAAI,CAACJ,QAAQ,EAAEK,KAAK;EACxD;EACF;EACE,IAAIC,SAAS;IACX,OAAO,IAAI,CAACJ,IAAI,EAAEE,OAAO,IAAI,CAAC,IAAI,CAACF,IAAI,EAAEG,KAAK;EAChD;EAEAE,QAAQ,CAACC,KAAY;IACnB;IACAA,KAAK,CAACC,cAAc;IAEpB,IAAI,IAAI,CAAChB,IAAI,CAACY,KAAK,EAAE;MACnB;MACA;MACAK,KAAK,CAAC,qCAAqC,CAAC;KAC7C,MAAM;MACL;MACA,IAAI,CAACjB,IAAI,CAACkB,gBAAgB,EAAE;MAC5BD,KAAK,CAAC,iCAAiC,CAAC;;EAE5C;;AA3CWpB,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;QAAdA,cAAc;EAAAsB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCV3B3B,+BAAuD;MAA9BA;QAAA,OAAY4B,oBAAgB;MAAA,EAAC;MAClD5B,2BAAK;MACkBA,uBAAO;MAAAA,iBAAQ;MAClCA,2BAA4C;MAChDA,iBAAM;MAENA,+DAOM;MAENA,qBAAK;MACLA,2BAAK;MACqDA,0BAAU;MAAAA,iBAAQ;MACxEA,4BAAsF;MAC1FA,iBAAM;MAENA,iEAOM;MACFA,sBAAK;MACLA,4BAAK;MACqBA,oCAAc;MAAAA,iBAAS;MAIzDA,4BAAK;MACEA,8FAA6E;MAAAA,+BAAQ;MAAAA,aAAoB;MAAAA,iBAAS;MAACA,+BAAQ;MAAAA,aAAuB;MAAAA,iBAAS;MAClKA,sBAAI;MAEJA,iBAAM;;;MAvCAA,oCAAkB;MAMdA,eAAmC;MAAnCA,kHAAmC;MAenCA,eAA2C;MAA3CA,kIAA2C;MAeuCA,eAAoB;MAApBA,0CAAoB;MAAkBA,eAAuB;MAAvBA,6CAAuB","names":["Validators","i0","LoginComponent","constructor","formBuilder","form","group","password","required","minLength","email","ngOnInit","Password","get","Mail","PasswordValid","touched","valid","MailValid","onEnviar","event","preventDefault","alert","markAllAsTouched","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\Paula\\Documents\\Argentina Programa\\ProyectoFinal-PaulaMicaelaSchuppe\\FrontEnd\\portfolio\\src\\app\\login\\login.component.ts","C:\\Users\\Paula\\Documents\\Argentina Programa\\ProyectoFinal-PaulaMicaelaSchuppe\\FrontEnd\\portfolio\\src\\app\\login\\login.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\n//importar las libreria de formulario que vamos a necesitar\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\n\nexport class LoginComponent implements OnInit {\n  form: FormGroup;\n\n  //Inyectar en el constructor el formBuilder\n  constructor(private formBuilder: FormBuilder){\n    //Creamos el grupo de controles para la formulacion de login \n    this.form= this.formBuilder.group({\n      password:['', [Validators.required, Validators.minLength(8)]],//tambien se puede usar maxLength para la longitud maxima del password\n      email:['', [Validators.required, Validators.email]],\n    })\n  }\n\n  ngOnInit() {}\n//Metodos para el formulario: toma el dato del password \n  get Password(){\n    return this.form.get(\"password\");\n  }\n//toma datos del mail\n  get Mail(){\n    return this.form.get(\"email\");\n  }\n//metodo de validacion del password \n  get PasswordValid(){\n    return this.Password?.touched && !this.Password?.valid;\n  }\n//metodo de validacion de mail \n  get MailValid(){\n    return this.Mail?.touched && !this.Mail?.valid; \n  }\n\n  onEnviar(event: Event){\n    //detenemos la propagacion o ejecucion del componente submit de un form\n    event.preventDefault;\n\n    if (this.form.valid) {\n      //llamamos a nuestro servicio para enviar los datos al servidor\n      //tambien podemos ejecutar alguna lógica extra\n      alert(\"Todo salió bien ¡Enviar formulario!\")\n    } else {\n      //Corremos todas las validaciones para que se ejecuten los mensajes de error en el template\n      this.form.markAllAsTouched();\n      alert(\"Contraseña o correo incorrectos\")\n    }\n  }\n}\n","<form [formGroup]=\"form\" (ngSubmit)=\"onEnviar($event)\">\n    <div><!--div para el email-->\n        <label for=\"email\">Email: </label>\n        <input type=\"email\" formControlName=\"email\">\n    </div>\n    <!--Gracias al getter que configuramos en el controlador, div para el password-->\n    <div *ngIf=\"Mail?.errors && Mail?.touched\">\n        <p *ngIf=\"Mail?.hasError('required')\" class=\"error\">\n            El email es requerido.\n        </p>\n        <p *ngIf=\"Mail?.hasError('email')\" class=\"error\">\n            El formato del email debe ser valido.\n        </p>\n    </div>\n\n    <br/>\n    <div>\n        <label for=\"exampleInputPassword1\" class=\"form-label\">Password: </label>\n        <input type=\"password\" formControlName=\"password\" [class.border-danger=\"MailInvalid\"]>\n    </div>\n    <!--Gracias al getter que configuramos en el controlador-->\n    <div *ngIf=\"Password?.errors && Password?.touched\">\n        <p *ngIf=\"Mail?.hasError('required')\" class=\"error\">\n            El password es requerido.\n        </p>\n        <p *ngIf=\"Password?.errors?.minlength\" class=\"error\">\n            El password debe ser de 8 o más caracteres.\n        </p>\n    </div>\n        <br/>\n        <div>\n            <button type=\"submit\">Iniciar Sesión</button>\n        </div>\n</form>\n\n<div>\n    <p>Un debuger para mostrar que es posible hacer un biding directo al formulario <strong>{{form.value.email}}</strong> <strong>{{form.value.password}}</strong></p>\n<br>\n\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}