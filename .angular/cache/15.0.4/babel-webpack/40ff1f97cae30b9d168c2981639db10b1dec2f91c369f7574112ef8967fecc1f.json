{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DatosService {\n  //http : alias seria http:HttpClient o datosJson:HttpClient\n  constructor(http) {\n    this.http = http;\n  } //definimos la herramiente http que tiene metodos (get o set)\n  //tenemos que crear al menos un metodo.En este caso será solo uno que va a ser para pedirle los datos al json.\n  //Metodo Observable que devuelve datos\n  getDatos() {\n    //getDatos es el nombre de la funcion(por eso termina entre ()) y la podemos cambiar con, por ej, obtenerData. any es que va a devolver cualquier cosa \n    //retorno de datos utilizando el metodo get ef HttpClient que llama a la base de datos JSON o a una URL\n    return this.http.get('./asset/db/datos .json');\n    //getDatos retorne esto(this) http con el metodo get (tomar) los datos del archivo json\n    //acá podria poner un callback para ver la opción de problema de conexión del servidor\n  }\n}\n\nDatosService.ɵfac = function DatosService_Factory(t) {\n  return new (t || DatosService)(i0.ɵɵinject(i1.HttpClient));\n};\nDatosService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DatosService,\n  factory: DatosService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAWA,OAAM,MAAOA,YAAY;EACvB;EAEAC,YAAoBC,IAAe;IAAf,SAAI,GAAJA,IAAI;EAAe,CAAC,CAAC;EAEzC;EACA;EAEAC,QAAQ;IAEN;IACF;IAEE,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAC,wBAAwB,CAAC;IAE9C;IACA;EACF;;;AAjBWJ,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAK,SAAZL,YAAY;EAAAM,YAFX;AAAM","names":["DatosService","constructor","http","getDatos","get","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Paula\\Documents\\Argentina Programa\\ProyectoFinal-PaulaMicaelaSchuppe\\FrontEnd\\portfolio\\src\\app\\servicios\\datos.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n//suscribirse a los datos y que reciba respuestas asincronas\n\nimport { Observable } from 'rxjs';\n//hacer peticiones y CRUD\n\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DatosService {\n  //http : alias seria http:HttpClient o datosJson:HttpClient\n  \n  constructor(private http:HttpClient) { } //definimos la herramiente http que tiene metodos (get o set)\n\n  //tenemos que crear al menos un metodo.En este caso será solo uno que va a ser para pedirle los datos al json.\n  //Metodo Observable que devuelve datos\n\n  getDatos():Observable<any>{  \n  \n    //getDatos es el nombre de la funcion(por eso termina entre ()) y la podemos cambiar con, por ej, obtenerData. any es que va a devolver cualquier cosa \n  //retorno de datos utilizando el metodo get ef HttpClient que llama a la base de datos JSON o a una URL\n\n    return this.http.get('./asset/db/datos .json'); \n    \n    //getDatos retorne esto(this) http con el metodo get (tomar) los datos del archivo json\n    //acá podria poner un callback para ver la opción de problema de conexión del servidor\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}